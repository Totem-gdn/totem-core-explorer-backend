syntax = "proto3";

package games_directory;

enum GameStatus {
  UNDEFINED = 0;
  PENDING = 1;
  ACCEPTED = 2;
  REJECTED = 3;
  BANNED = 4;
}

message GameRecord {
  string game_address = 1;
  string owner_address = 2;
  string name = 3;
  string author = 4;
  string renderer = 5;
  string avatar_filter = 6;
  string item_filter = 7;
  string gem_filter = 8;
  string website = 9;
  uint64 created_at = 10;
  uint64 updated_at = 11;
  GameStatus status = 12;
}

message CreateGameRequest {
  string game_address = 1;
  string owner_address = 2;
  string name = 3;
  string author = 4;
  string renderer = 5;
  string avatar_filter = 6;
  string item_filter = 7;
  string gem_filter = 8;
  string website = 9;
  GameStatus status = 10;
}

message CreateGameResponse {
  string tx_hash = 1;
}

message UpdateGameRequest {
  string game_address = 1;
  string owner_address = 2;
  string name = 3;
  string author = 4;
  string renderer = 5;
  string avatar_filter = 6;
  string item_filter = 7;
  string gem_filter = 8;
  string website = 9;
  GameStatus status = 10;
}

message UpdateGameResponse {
  string tx_hash = 1;
}

message FindAllRequest {
  message Filters {
    optional string owner_address = 1;
    optional GameStatus status = 2;
  }
  Filters filters = 1;
  uint64 limit = 2;
  uint64 offset = 3;
}

message FindAllResponse {
  uint64 total = 1;
  uint64 limit = 2;
  uint64 offset = 3;
  repeated GameRecord results = 4;
}

message FindByIdRequest {
  string record_id = 1;
}

message FindByIdResponse {
  GameRecord record = 1;
}

message FindByAddressRequest {
  string game_address = 1;
}

message FindByAddressResponse {
  GameRecord record = 1;
}

service GamesDirectory {
  rpc Create (CreateGameRequest) returns (CreateGameResponse);
  rpc Update (UpdateGameRequest) returns (UpdateGameResponse);
  rpc FindAll (FindAllRequest) returns (FindAllResponse);
  rpc FindById (FindByIdRequest) returns (FindByIdResponse);
  rpc FindByAddress (FindByAddressRequest) returns (FindByAddressResponse);
}
